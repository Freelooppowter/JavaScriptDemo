JavaScript 数值始终是 64 位的浮点数
与许多其他编程语言不同，JavaScript 不会定义不同类型的数，比如整数、短的、长的、浮点的等等。

JavaScript 数值始终以双精度浮点数来存储，根据国际 IEEE 754 标准。

此格式用 64 位存储数值，其中 0 到 51 存储数字（片段），52 到 62 存储指数，63 位存储符号

整数（不使用指数或科学计数法）会被精确到 15 位。
例如：
var x = 999999999999999;   // x 将是 999999999999999
var y = 9999999999999999;  // y 将是 10000000000000000

小数的最大数是 17 位，但是浮点的算数并不总是 100% 精准：
例如：
var x = 0.2 + 0.1; //// x 将是 0.30000000000000004
使用乘除法有助于解决上面的问题：
例如：
var x = (0.2 * 10 + 0.1 * 10) / 10;       // x 将是 0.3

JavaScript 的加法和级联（concatenation）都使用 + 运算符。

数字用加法。字符串用级联。

如果您对两个数相加，结果将是一个数：

实例
var x = 10;
var y = 20;
var z = x + y;           // z 将是 30（一个数）
亲自试一试
如果对两个字符串相加，结果将是一个字符串的级联：

实例
var x = "10";
var y = "20";
var z = x + y;           // z 将是 1020（字符串）
亲自试一试
如果您对一个数和一个字符串相加，结果也是字符串级联：

实例
var x = 10;
var y = "20";
var z = x + y;           // z 将是 1020（一个字符串）
亲自试一试
如果您对一个字符串和一个数字相加，结果也是字符串级联：

实例
var x = "10";
var y = 20;
var z = x + y;           // z 将是 1020（字符串）
亲自试一试
常见的错误是认为结果应该是 30：

实例
var x = 10;
var y = 20;
var z = "The result is: " + x + y;
亲自试一试
常见的错误是认为结果应该是 102030：

实例
var x = 10;
var y = 20;
var z = "30";
var result = x + y + z;
亲自试一试
JavaScript 从左向右进行编译。

因为 x 和 y 都是数，10 + 20 将被相加。

因为 z 是字符串，30 + "30" 被级联。
